// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using comestic.Models;

namespace comestic.Migrations
{
    [DbContext(typeof(ShopContext))]
    [Migration("20211106165055_v3")]
    partial class v3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("comestic.Models.Banners", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<DateTime>("Created_at")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("description")
                        .HasColumnType("text")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Photo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("photo")
                        .HasColumnType("varchar(191)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(191);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("slug")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("enum('active','inactive')")
                        .HasDefaultValueSql("'''inactive'''");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<DateTime>("Updated_at")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasName("banners_slug_unique");

                    b.ToTable("banners");
                });

            modelBuilder.Entity("comestic.Models.Brands", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<DateTime>("Created_at")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("slug")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("enum('active','inactive')")
                        .HasDefaultValueSql("'''active'''");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<DateTime>("Updated_at")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasName("brands_slug_unique");

                    b.ToTable("brands");
                });

            modelBuilder.Entity("comestic.Models.Carts", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("decimal(10,0)");

                    b.Property<DateTime>("Created_at")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<long?>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("order_id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("decimal(10,0)");

                    b.Property<long>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("int(11)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("enum('new','progress','delivered','cancel')")
                        .HasDefaultValueSql("'''new'''");

                    b.Property<DateTime>("Updated_at")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.Property<long?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .HasName("carts_order_id_foreign");

                    b.HasIndex("ProductId")
                        .HasName("carts_product_id_foreign");

                    b.HasIndex("UserId")
                        .HasName("carts_user_id_foreign");

                    b.ToTable("carts");
                });

            modelBuilder.Entity("comestic.Models.Categories", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<long?>("AddedBy")
                        .HasColumnName("added_by")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<DateTime>("Created_at")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsParent")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_parent")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<long?>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("parent_id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Photo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("photo")
                        .HasColumnType("varchar(191)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(191);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("slug")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("enum('active','inactive')")
                        .HasDefaultValueSql("'''inactive'''");

                    b.Property<string>("Summary")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("summary")
                        .HasColumnType("text")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<DateTime>("Updated_at")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy")
                        .HasName("categories_added_by_foreign");

                    b.HasIndex("ParentId")
                        .HasName("categories_parent_id_foreign");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasName("categories_slug_unique");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("comestic.Models.Coupons", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<DateTime>("Created_at")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Ended_at")
                        .HasColumnName("ended_at")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsVoucher")
                        .HasColumnName("is_voucher")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("int(11)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("enum('active','inactive')")
                        .HasDefaultValueSql("'''active'''");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("type")
                        .HasColumnType("enum('fixed','percent')")
                        .HasDefaultValueSql("'''fixed'''");

                    b.Property<DateTime>("Updated_at")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Value")
                        .HasColumnName("value")
                        .HasColumnType("decimal(20,2)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("coupons_code_unique");

                    b.ToTable("coupons");
                });

            modelBuilder.Entity("comestic.Models.Efmigrationshistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32);

                    b.HasKey("MigrationId")
                        .HasName("PRIMARY");

                    b.ToTable("__efmigrationshistory");
                });

            modelBuilder.Entity("comestic.Models.Messages", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<DateTime>("Created_at")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnName("message")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<string>("Phone")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("phone")
                        .HasColumnType("varchar(191)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(191);

                    b.Property<string>("Photo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("photo")
                        .HasColumnType("varchar(191)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(191);

                    b.Property<DateTime>("Read_at")
                        .HasColumnName("read_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnName("subject")
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated_at")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("comestic.Models.Notifications", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("char(36)")
                        .IsFixedLength(true)
                        .HasMaxLength(36);

                    b.Property<DateTime>("Created_at")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnName("data")
                        .HasColumnType("text");

                    b.Property<long>("NotifiableId")
                        .HasColumnName("notifiable_id")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<string>("NotifiableType")
                        .IsRequired()
                        .HasColumnName("notifiable_type")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<DateTime>("Read_at")
                        .HasColumnName("read_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<DateTime>("Updated_at")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("NotifiableType", "NotifiableId")
                        .HasName("notifications_notifiable_type_notifiable_id_index");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("comestic.Models.Orders", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("address")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnName("country")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<long?>("CouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("coupon_id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<DateTime>("Created_at")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnName("order_number")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("payment_method")
                        .HasColumnType("enum('cod','paypal')")
                        .HasDefaultValueSql("'''cod'''");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("payment_status")
                        .HasColumnType("enum('paid','unpaid')")
                        .HasDefaultValueSql("'''unpaid'''");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("int(11)");

                    b.Property<long?>("ShippingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("shipping_id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("enum('new','process','delivered','cancel')")
                        .HasDefaultValueSql("'''new'''");

                    b.Property<decimal>("SubTotal")
                        .HasColumnName("sub_total")
                        .HasColumnType("decimal(10,0)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnName("total_amount")
                        .HasColumnType("decimal(10,0)");

                    b.Property<DateTime>("Updated_at")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.Property<long?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("Id");

                    b.HasIndex("CouponId")
                        .HasName("orders_coupon_id_foreign");

                    b.HasIndex("OrderNumber")
                        .IsUnique()
                        .HasName("orders_order_number_unique");

                    b.HasIndex("ShippingId")
                        .HasName("orders_shipping_id_foreign");

                    b.HasIndex("UserId")
                        .HasName("orders_user_id_foreign");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("comestic.Models.PasswordResets", b =>
                {
                    b.Property<DateTime>("Created_at")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnName("token")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.HasIndex("Email")
                        .HasName("password_resets_email_index");

                    b.ToTable("password_resets");
                });

            modelBuilder.Entity("comestic.Models.PostCategories", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<DateTime>("Created_at")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("slug")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("enum('active','inactive')")
                        .HasDefaultValueSql("'''active'''");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<DateTime>("Updated_at")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasName("post_categories_slug_unique");

                    b.ToTable("post_categories");
                });

            modelBuilder.Entity("comestic.Models.PostComments", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_at")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<long?>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("parent_id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<long?>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("post_id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("enum('active','inactive')")
                        .HasDefaultValueSql("'''active'''");

                    b.Property<DateTime>("Updated_at")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.Property<long?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("Id");

                    b.HasIndex("PostId")
                        .HasName("post_comments_post_id_foreign");

                    b.HasIndex("UserId")
                        .HasName("post_comments_user_id_foreign");

                    b.ToTable("post_comments");
                });

            modelBuilder.Entity("comestic.Models.PostTags", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<DateTime>("Created_at")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("slug")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("enum('active','inactive')")
                        .HasDefaultValueSql("'''active'''");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<DateTime>("Updated_at")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasName("post_tags_slug_unique");

                    b.ToTable("post_tags");
                });

            modelBuilder.Entity("comestic.Models.Posts", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<long?>("AddedBy")
                        .HasColumnName("added_by")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<DateTime>("Created_at")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("description")
                        .HasColumnType("longtext")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Photo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("photo")
                        .HasColumnType("varchar(191)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(191);

                    b.Property<long?>("PostCatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("post_cat_id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<long?>("PostTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("post_tag_id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Quote")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("quote")
                        .HasColumnType("text")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("slug")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("enum('active','inactive')")
                        .HasDefaultValueSql("'''active'''");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnName("summary")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tags")
                        .HasColumnType("varchar(191)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(191);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<DateTime>("Updated_at")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy")
                        .HasName("posts_added_by_foreign");

                    b.HasIndex("PostCatId")
                        .HasName("posts_post_cat_id_foreign");

                    b.HasIndex("PostTagId")
                        .HasName("posts_post_tag_id_foreign");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasName("posts_slug_unique");

                    b.ToTable("posts");
                });

            modelBuilder.Entity("comestic.Models.ProductReviews", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<DateTime>("Created_at")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<long?>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("product_id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<byte>("Rate")
                        .HasColumnName("rate")
                        .HasColumnType("tinyint(4)");

                    b.Property<string>("Review")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("review")
                        .HasColumnType("text")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("enum('active','inactive')")
                        .HasDefaultValueSql("'''active'''");

                    b.Property<DateTime>("Updated_at")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.Property<long?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .HasName("product_reviews_product_id_foreign");

                    b.HasIndex("UserId")
                        .HasName("product_reviews_user_id_foreign");

                    b.ToTable("product_reviews");
                });

            modelBuilder.Entity("comestic.Models.Products", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<long?>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("brand_id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<long?>("CatId")
                        .HasColumnName("cat_id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<long?>("ChildCatId")
                        .HasColumnName("child_cat_id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnName("color")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<string>("Condition")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("condition")
                        .HasColumnType("enum('default','new','hot')")
                        .HasDefaultValueSql("'''default'''");

                    b.Property<long?>("CouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("coupon_id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<DateTime>("Created_at")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("description")
                        .HasColumnType("longtext")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Photo1")
                        .IsRequired()
                        .HasColumnName("photo1")
                        .HasColumnType("text");

                    b.Property<string>("Photo2")
                        .IsRequired()
                        .HasColumnName("photo2")
                        .HasColumnType("text");

                    b.Property<string>("Photo3")
                        .IsRequired()
                        .HasColumnName("photo3")
                        .HasColumnType("text");

                    b.Property<string>("Photo4")
                        .IsRequired()
                        .HasColumnName("photo4")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("decimal(10,0)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("slug")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("enum('active','inactive')")
                        .HasDefaultValueSql("'''inactive'''");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("stock")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnName("summary")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<DateTime>("Updated_at")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("BrandId")
                        .HasName("products_brand_id_foreign");

                    b.HasIndex("CatId")
                        .HasName("products_cat_id_foreign");

                    b.HasIndex("ChildCatId")
                        .HasName("products_child_cat_id_foreign");

                    b.HasIndex("CouponId")
                        .HasName("products_coupon_id_foreign");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasName("products_slug_unique");

                    b.ToTable("products");
                });

            modelBuilder.Entity("comestic.Models.Settings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("address")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<DateTime>("Created_at")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnName("logo")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnName("photo")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<string>("ShortDes")
                        .IsRequired()
                        .HasColumnName("short_des")
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated_at")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("settings");
                });

            modelBuilder.Entity("comestic.Models.Shippings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<DateTime>("Created_at")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("enum('active','inactive')")
                        .HasDefaultValueSql("'''active'''");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<DateTime>("Updated_at")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("shippings");
                });

            modelBuilder.Entity("comestic.Models.Users", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<DateTime>("Created_at")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("email")
                        .HasColumnType("varchar(191)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(191);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(191)")
                        .HasMaxLength(191);

                    b.Property<string>("Password")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("password")
                        .HasColumnType("varchar(191)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(191);

                    b.Property<string>("Photo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("photo")
                        .HasColumnType("varchar(191)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(191);

                    b.Property<string>("RememberToken")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("remember_token")
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(100);

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("role")
                        .HasColumnType("enum('admin','user')")
                        .HasDefaultValueSql("'''user'''");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("enum('active','inactive')")
                        .HasDefaultValueSql("'''active'''");

                    b.Property<DateTime>("Updated_at")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("users_email_unique");

                    b.ToTable("users");
                });

            modelBuilder.Entity("comestic.Models.Wishlists", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("decimal(10,0)");

                    b.Property<long?>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cart_id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<DateTime>("Created_at")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("decimal(10,0)");

                    b.Property<long>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("Updated_at")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.Property<long?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("Id");

                    b.HasIndex("CartId")
                        .HasName("wishlists_cart_id_foreign");

                    b.HasIndex("ProductId")
                        .HasName("wishlists_product_id_foreign");

                    b.HasIndex("UserId")
                        .HasName("wishlists_user_id_foreign");

                    b.ToTable("wishlists");
                });

            modelBuilder.Entity("comestic.Models.Carts", b =>
                {
                    b.HasOne("comestic.Models.Orders", "Order")
                        .WithMany("Carts")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("carts_order_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("comestic.Models.Products", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("carts_product_id_foreign")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("comestic.Models.Users", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("carts_user_id_foreign")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("comestic.Models.Categories", b =>
                {
                    b.HasOne("comestic.Models.Users", "AddedByNavigation")
                        .WithMany("Categories")
                        .HasForeignKey("AddedBy")
                        .HasConstraintName("categories_added_by_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("comestic.Models.Categories", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("categories_parent_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("comestic.Models.Orders", b =>
                {
                    b.HasOne("comestic.Models.Coupons", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("CouponId")
                        .HasConstraintName("orders_coupon_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("comestic.Models.Shippings", "Shipping")
                        .WithMany("Orders")
                        .HasForeignKey("ShippingId")
                        .HasConstraintName("orders_shipping_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("comestic.Models.Users", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("orders_user_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("comestic.Models.PostComments", b =>
                {
                    b.HasOne("comestic.Models.Posts", "Post")
                        .WithMany("PostComments")
                        .HasForeignKey("PostId")
                        .HasConstraintName("post_comments_post_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("comestic.Models.Users", "User")
                        .WithMany("PostComments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("post_comments_user_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("comestic.Models.Posts", b =>
                {
                    b.HasOne("comestic.Models.Users", "AddedByNavigation")
                        .WithMany("Posts")
                        .HasForeignKey("AddedBy")
                        .HasConstraintName("posts_added_by_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("comestic.Models.PostCategories", "PostCat")
                        .WithMany("Posts")
                        .HasForeignKey("PostCatId")
                        .HasConstraintName("posts_post_cat_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("comestic.Models.PostTags", "PostTag")
                        .WithMany("Posts")
                        .HasForeignKey("PostTagId")
                        .HasConstraintName("posts_post_tag_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("comestic.Models.ProductReviews", b =>
                {
                    b.HasOne("comestic.Models.Products", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("product_reviews_product_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("comestic.Models.Users", "User")
                        .WithMany("ProductReviews")
                        .HasForeignKey("UserId")
                        .HasConstraintName("product_reviews_user_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("comestic.Models.Products", b =>
                {
                    b.HasOne("comestic.Models.Brands", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("products_brand_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("comestic.Models.Categories", "Cat")
                        .WithMany("ProductsCat")
                        .HasForeignKey("CatId")
                        .HasConstraintName("products_cat_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("comestic.Models.Categories", "ChildCat")
                        .WithMany("ProductsChildCat")
                        .HasForeignKey("ChildCatId")
                        .HasConstraintName("products_child_cat_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("comestic.Models.Coupons", "Coupon")
                        .WithMany("Products")
                        .HasForeignKey("CouponId")
                        .HasConstraintName("products_coupon_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("comestic.Models.Wishlists", b =>
                {
                    b.HasOne("comestic.Models.Carts", "Cart")
                        .WithMany("Wishlists")
                        .HasForeignKey("CartId")
                        .HasConstraintName("wishlists_cart_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("comestic.Models.Products", "Product")
                        .WithMany("Wishlists")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("wishlists_product_id_foreign")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("comestic.Models.Users", "User")
                        .WithMany("Wishlists")
                        .HasForeignKey("UserId")
                        .HasConstraintName("wishlists_user_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
