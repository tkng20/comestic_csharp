// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using comestic_csharp.Models;

namespace comestic_csharp.Migrations
{
    [DbContext(typeof(ShopContext))]
    [Migration("20211107190348_v1")]
    partial class v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("comestic_csharp.Models.Banner", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('banner','promo')")
                        .HasColumnName("condition")
                        .HasDefaultValueSql("'banner'")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Photo")
                        .HasColumnType("varchar(191)")
                        .HasColumnName("photo")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("slug")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("title")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Slug" }, "Banners_slug_unique")
                        .IsUnique();

                    b.ToTable("banners");
                });

            modelBuilder.Entity("comestic_csharp.Models.Brand", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("slug")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('active','inactive')")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'active'")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("title")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Slug" }, "Brands_slug_unique")
                        .IsUnique();

                    b.ToTable("brands");
                });

            modelBuilder.Entity("comestic_csharp.Models.Cart", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)")
                        .HasColumnName("amount");

                    b.Property<ulong?>("OrderId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("order_id");

                    b.Property<decimal>("Price")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)")
                        .HasColumnName("price");

                    b.Property<ulong>("ProductId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int(11)")
                        .HasColumnName("quantity");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('new','progress','delivered','cancel')")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'new'")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<ulong?>("UserId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrderId" }, "Carts_order_id_foreign");

                    b.HasIndex(new[] { "ProductId" }, "Carts_product_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "Carts_user_id_foreign");

                    b.ToTable("carts");
                });

            modelBuilder.Entity("comestic_csharp.Models.Category", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<ulong?>("AddedBy")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("added_by");

                    b.Property<bool?>("IsParent")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_parent")
                        .HasDefaultValueSql("'1'");

                    b.Property<ulong?>("ParentId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("parent_id");

                    b.Property<string>("Photo")
                        .HasColumnType("varchar(191)")
                        .HasColumnName("photo")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("slug")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('active','inactive')")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'inactive'")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasColumnName("summary")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("title")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AddedBy" }, "Categories_added_by_foreign");

                    b.HasIndex(new[] { "ParentId" }, "Categories_parent_id_foreign");

                    b.HasIndex(new[] { "Slug" }, "Categories_slug_unique")
                        .IsUnique();

                    b.ToTable("categories");
                });

            modelBuilder.Entity("comestic_csharp.Models.Coupon", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("code")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("ended_at");

                    b.Property<bool>("IsVoucher")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_voucher");

                    b.Property<int>("Quantity")
                        .HasColumnType("int(11)")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("started_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('active','inactive')")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'active'")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('fixed','percent')")
                        .HasColumnName("type")
                        .HasDefaultValueSql("'fixed'")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<decimal>("Value")
                        .HasPrecision(20, 2)
                        .HasColumnType("decimal(20,2)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Code" }, "Coupons_code_unique")
                        .IsUnique();

                    b.ToTable("coupons");
                });

            modelBuilder.Entity("comestic_csharp.Models.Message", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("email")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Message1")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("message")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("name")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(191)")
                        .HasColumnName("phone")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Photo")
                        .HasColumnType("varchar(191)")
                        .HasColumnName("photo")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("read_at");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("comestic_csharp.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<ulong>("NotifiableId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("notifiable_id");

                    b.Property<string>("NotifiableType")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("notifiable_type")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("read_at");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("type")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NotifiableType", "NotifiableId" }, "Notifications_notifiable_type_notifiable_id_index");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("comestic_csharp.Models.Order", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<ulong?>("CouponId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("coupon_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("email")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("first_name")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("last_name")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("order_number")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('cod','paypal')")
                        .HasColumnName("payment_method")
                        .HasDefaultValueSql("'cod'")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('paid','unpaid')")
                        .HasColumnName("payment_status")
                        .HasDefaultValueSql("'unpaid'")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("phone")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<ulong?>("ProductId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int(11)")
                        .HasColumnName("quantity");

                    b.Property<ulong?>("ShippingId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("shipping_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('new','process','delivered','cancel')")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'new'")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)")
                        .HasColumnName("sub_total");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)")
                        .HasColumnName("total_amount");

                    b.Property<ulong?>("UserId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CouponId" }, "Orders_coupon_id_foreign");

                    b.HasIndex(new[] { "OrderNumber" }, "Orders_order_number_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "ProductId" }, "Orders_product_id_foreign");

                    b.HasIndex(new[] { "ShippingId" }, "Orders_shipping_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "Orders_user_id_foreign");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("comestic_csharp.Models.Post", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<ulong?>("AddedBy")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("added_by");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Photo")
                        .HasColumnType("varchar(191)")
                        .HasColumnName("photo")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<ulong?>("PostCatId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("post_cat_id");

                    b.Property<string>("Quote")
                        .HasColumnType("text")
                        .HasColumnName("quote")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("slug")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('active','inactive')")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'active'")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("summary")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("title")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AddedBy" }, "Posts_added_by_foreign");

                    b.HasIndex(new[] { "PostCatId" }, "Posts_post_cat_id_foreign");

                    b.HasIndex(new[] { "Slug" }, "Posts_slug_unique")
                        .IsUnique();

                    b.ToTable("posts");
                });

            modelBuilder.Entity("comestic_csharp.Models.Postcategory", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("slug")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('active','inactive')")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'active'")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("title")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Slug" }, "PostCategories_slug_unique")
                        .IsUnique();

                    b.ToTable("postcategories");
                });

            modelBuilder.Entity("comestic_csharp.Models.Postcomment", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comments")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<ulong?>("ParentId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("parent_id");

                    b.Property<ulong?>("PostId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("post_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('active','inactive')")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'active'")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<ulong?>("UserId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PostId" }, "PostComments_post_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "PostComments_user_id_foreign");

                    b.ToTable("postcomments");
                });

            modelBuilder.Entity("comestic_csharp.Models.Postsandtag", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<ulong?>("PostId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("post_id");

                    b.Property<ulong?>("TagId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("tag_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PostId" }, "PostsAndTags_post_id_foreign");

                    b.HasIndex(new[] { "TagId" }, "PostsAndTags_post_tag_id_foreign");

                    b.ToTable("postsandtags");
                });

            modelBuilder.Entity("comestic_csharp.Models.Posttag", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("slug")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('active','inactive')")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'active'")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("title")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Slug" }, "PostTags_slug_unique")
                        .IsUnique();

                    b.ToTable("posttags");
                });

            modelBuilder.Entity("comestic_csharp.Models.Product", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<ulong?>("BrandId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("brand_id");

                    b.Property<ulong?>("CatId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("cat_id");

                    b.Property<ulong?>("ChildCatId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("child_cat_id");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('default','new','hot')")
                        .HasColumnName("condition")
                        .HasDefaultValueSql("'default'")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<ulong?>("CouponId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("coupon_id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Photo1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("photo1")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Photo2")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("photo2")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Photo3")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("photo3")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Photo4")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("photo4")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<decimal>("Price")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)")
                        .HasColumnName("price");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("slug")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('active','inactive')")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'inactive'")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("stock")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("summary")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("title")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BrandId" }, "Products_brand_id_foreign");

                    b.HasIndex(new[] { "CatId" }, "Products_cat_id_foreign");

                    b.HasIndex(new[] { "ChildCatId" }, "Products_child_cat_id_foreign");

                    b.HasIndex(new[] { "CouponId" }, "Products_coupon_id_foreign");

                    b.HasIndex(new[] { "Slug" }, "Products_slug_unique")
                        .IsUnique();

                    b.ToTable("products");
                });

            modelBuilder.Entity("comestic_csharp.Models.Productattribute", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("color")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<decimal>("Price")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)")
                        .HasColumnName("price");

                    b.Property<ulong?>("ProductId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("product_id");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("stock")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductId" }, "ProductAttributes_product_id_foreign");

                    b.ToTable("productattributes");
                });

            modelBuilder.Entity("comestic_csharp.Models.Productreview", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<ulong?>("ProductId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("product_id");

                    b.Property<sbyte>("Rating")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("rating");

                    b.Property<string>("Review")
                        .HasColumnType("text")
                        .HasColumnName("review")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('active','inactive')")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'active'")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<ulong?>("UserId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductId" }, "ProductReviews_product_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "ProductReviews_user_id_foreign");

                    b.ToTable("productreviews");
                });

            modelBuilder.Entity("comestic_csharp.Models.Setting", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("address")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("email")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("logo")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("phone")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("photo")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("ShortDes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("short_des")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("settings");
                });

            modelBuilder.Entity("comestic_csharp.Models.Shipping", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<decimal>("Price")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("price");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('active','inactive')")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'active'")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("type")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("shippings");
                });

            modelBuilder.Entity("comestic_csharp.Models.User", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(191)")
                        .HasColumnName("address")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(191)")
                        .HasColumnName("email")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("fullname")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(191)")
                        .HasColumnName("password")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(191)")
                        .HasColumnName("phone")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Photo")
                        .HasColumnType("varchar(191)")
                        .HasColumnName("photo")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('employee','customer')")
                        .HasColumnName("role")
                        .HasDefaultValueSql("'customer'")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('active','inactive')")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'active'")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("user_name")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "Users_email_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "Phone" }, "Users_phone_unique")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("comestic_csharp.Models.Wishlist", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)")
                        .HasColumnName("amount");

                    b.Property<ulong?>("CartId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("cart_id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("varchar(191)")
                        .HasColumnName("color")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<decimal>("Price")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)")
                        .HasColumnName("price");

                    b.Property<ulong>("ProductId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int(11)")
                        .HasColumnName("quantity");

                    b.Property<ulong?>("UserId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CartId" }, "Wishlists_cart_id_foreign");

                    b.HasIndex(new[] { "ProductId" }, "Wishlists_product_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "Wishlists_user_id_foreign");

                    b.ToTable("wishlists");
                });

            modelBuilder.Entity("comestic_csharp.Models.Cart", b =>
                {
                    b.HasOne("comestic_csharp.Models.Order", "Order")
                        .WithMany("Carts")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("Carts_order_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("comestic_csharp.Models.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("Carts_product_id_foreign")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("comestic_csharp.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Carts_user_id_foreign")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("comestic_csharp.Models.Category", b =>
                {
                    b.HasOne("comestic_csharp.Models.User", "AddedByNavigation")
                        .WithMany("Categories")
                        .HasForeignKey("AddedBy")
                        .HasConstraintName("Categories_added_by_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("comestic_csharp.Models.Category", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("Categories_parent_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AddedByNavigation");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("comestic_csharp.Models.Order", b =>
                {
                    b.HasOne("comestic_csharp.Models.Coupon", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("CouponId")
                        .HasConstraintName("Orders_coupon_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("comestic_csharp.Models.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("Orders_product_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("comestic_csharp.Models.Shipping", "Shipping")
                        .WithMany("Orders")
                        .HasForeignKey("ShippingId")
                        .HasConstraintName("Orders_shipping_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("comestic_csharp.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Orders_user_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Coupon");

                    b.Navigation("Product");

                    b.Navigation("Shipping");

                    b.Navigation("User");
                });

            modelBuilder.Entity("comestic_csharp.Models.Post", b =>
                {
                    b.HasOne("comestic_csharp.Models.User", "AddedByNavigation")
                        .WithMany("Posts")
                        .HasForeignKey("AddedBy")
                        .HasConstraintName("Posts_added_by_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("comestic_csharp.Models.Postcategory", "PostCat")
                        .WithMany("Posts")
                        .HasForeignKey("PostCatId")
                        .HasConstraintName("Posts_post_cat_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AddedByNavigation");

                    b.Navigation("PostCat");
                });

            modelBuilder.Entity("comestic_csharp.Models.Postcomment", b =>
                {
                    b.HasOne("comestic_csharp.Models.Post", "Post")
                        .WithMany("Postcomments")
                        .HasForeignKey("PostId")
                        .HasConstraintName("PostComments_post_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("comestic_csharp.Models.User", "User")
                        .WithMany("Postcomments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("PostComments_user_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("comestic_csharp.Models.Postsandtag", b =>
                {
                    b.HasOne("comestic_csharp.Models.Post", "Post")
                        .WithMany("Postsandtags")
                        .HasForeignKey("PostId")
                        .HasConstraintName("PostsAndTags_post_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("comestic_csharp.Models.Posttag", "Tag")
                        .WithMany("Postsandtags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("PostsAndTags_post_tag_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("comestic_csharp.Models.Product", b =>
                {
                    b.HasOne("comestic_csharp.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("Products_brand_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("comestic_csharp.Models.Category", "Cat")
                        .WithMany("ProductCats")
                        .HasForeignKey("CatId")
                        .HasConstraintName("Products_cat_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("comestic_csharp.Models.Category", "ChildCat")
                        .WithMany("ProductChildCats")
                        .HasForeignKey("ChildCatId")
                        .HasConstraintName("Products_child_cat_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("comestic_csharp.Models.Coupon", "Coupon")
                        .WithMany("Products")
                        .HasForeignKey("CouponId")
                        .HasConstraintName("Products_coupon_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("Cat");

                    b.Navigation("ChildCat");

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("comestic_csharp.Models.Productattribute", b =>
                {
                    b.HasOne("comestic_csharp.Models.Product", "Product")
                        .WithMany("Productattributes")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("ProductAttributes_product_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Product");
                });

            modelBuilder.Entity("comestic_csharp.Models.Productreview", b =>
                {
                    b.HasOne("comestic_csharp.Models.Product", "Product")
                        .WithMany("Productreviews")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("ProductReviews_product_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("comestic_csharp.Models.User", "User")
                        .WithMany("Productreviews")
                        .HasForeignKey("UserId")
                        .HasConstraintName("ProductReviews_user_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("comestic_csharp.Models.Wishlist", b =>
                {
                    b.HasOne("comestic_csharp.Models.Cart", "Cart")
                        .WithMany("Wishlists")
                        .HasForeignKey("CartId")
                        .HasConstraintName("Wishlists_cart_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("comestic_csharp.Models.Product", "Product")
                        .WithMany("Wishlists")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("Wishlists_product_id_foreign")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("comestic_csharp.Models.User", "User")
                        .WithMany("Wishlists")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Wishlists_user_id_foreign")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Cart");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("comestic_csharp.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("comestic_csharp.Models.Cart", b =>
                {
                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("comestic_csharp.Models.Category", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("ProductCats");

                    b.Navigation("ProductChildCats");
                });

            modelBuilder.Entity("comestic_csharp.Models.Coupon", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("comestic_csharp.Models.Order", b =>
                {
                    b.Navigation("Carts");
                });

            modelBuilder.Entity("comestic_csharp.Models.Post", b =>
                {
                    b.Navigation("Postcomments");

                    b.Navigation("Postsandtags");
                });

            modelBuilder.Entity("comestic_csharp.Models.Postcategory", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("comestic_csharp.Models.Posttag", b =>
                {
                    b.Navigation("Postsandtags");
                });

            modelBuilder.Entity("comestic_csharp.Models.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("Productattributes");

                    b.Navigation("Productreviews");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("comestic_csharp.Models.Shipping", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("comestic_csharp.Models.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Categories");

                    b.Navigation("Orders");

                    b.Navigation("Postcomments");

                    b.Navigation("Posts");

                    b.Navigation("Productreviews");

                    b.Navigation("Wishlists");
                });
#pragma warning restore 612, 618
        }
    }
}
